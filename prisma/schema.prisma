generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id
  email          String    @unique
  username       String
  email_verified Int       @default(0)
  totp_key       Bytes?
  recovery_code  Bytes
  key            Key[]
  person         Person?
  auth_session   Session[]
  trees          Tree[]
}

model Session {
  id                  String @id
  user_id             String
  active_expires      BigInt
  idle_expires        BigInt
  two_factor_verified Int    @default(0)
  user                User   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Key {
  id              String  @id
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Tree {
  id              String           @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownerId         String
  familyRelations FamilyRelation[]
  layouts         Layout[]
  nodes           Node[]
  people          Person[]
  relationships   Relationship[]
  owner           User             @relation(fields: [ownerId], references: [id])
}

model Person {
  id                String           @id @default(cuid())
  firstName         String
  lastName          String?
  birthDate         DateTime?
  deathDate         DateTime?
  gender            String?
  notes             String?
  treeId            String
  userId            String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  childrenToParents FamilyRelation[] @relation("PersonToChild")
  parentsToChildren FamilyRelation[] @relation("PersonToParent")
  media             Media[]
  nodes             Node[]           @relation("PersonToNode")
  user              User?            @relation(fields: [userId], references: [id])
  tree              Tree             @relation(fields: [treeId], references: [id])
  relationshipsTo   Relationship[]   @relation("ToRelation")
  relationshipsFrom Relationship[]   @relation("FromRelation")
}

model Node {
  id        String   @id @default(cuid())
  personId  String
  treeId    String
  x         Float?
  y         Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tree      Tree     @relation(fields: [treeId], references: [id])
  person    Person   @relation("PersonToNode", fields: [personId], references: [id])
}

model Media {
  id          String   @id @default(cuid())
  url         String
  type        String
  title       String?
  description String?
  personId    String
  layoutId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  layout      Layout?  @relation(fields: [layoutId], references: [id])
  person      Person   @relation(fields: [personId], references: [id])
}

model Layout {
  id        String   @id @default(cuid())
  name      String
  type      String
  config    String
  isDefault Boolean  @default(false)
  treeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tree      Tree     @relation(fields: [treeId], references: [id])
  media     Media[]
}

model FamilyRelation {
  id           String   @id @default(cuid())
  parentId     String
  childId      String
  relationType String
  treeId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tree         Tree     @relation(fields: [treeId], references: [id])
  child        Person   @relation("PersonToChild", fields: [childId], references: [id])
  parent       Person   @relation("PersonToParent", fields: [parentId], references: [id])

  @@unique([parentId, childId, relationType])
}

model Relationship {
  id           String    @id @default(cuid())
  fromPersonId String
  toPersonId   String
  type         String
  subtype      String?
  startDate    DateTime?
  endDate      DateTime?
  treeId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tree         Tree      @relation(fields: [treeId], references: [id])
  toPerson     Person    @relation("ToRelation", fields: [toPersonId], references: [id])
  fromPerson   Person    @relation("FromRelation", fields: [fromPersonId], references: [id])

  @@unique([fromPersonId, toPersonId, type, subtype])
}
